import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function GET() {
  try {
    console.log('üîç Debug Settings API: Fetching settings...')
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ —î –≤ —Ç–∞–±–ª–∏—Ü—ñ settings
    const { data: allSettings, error: allError } = await supabase
      .from('settings')
      .select('*')

    console.log('üìä All settings rows:', allSettings?.length || 0, allSettings)
    
    if (allError) {
      console.error('‚ùå Settings query error:', allError)
    }

    // –¢–µ–ø–µ—Ä –æ—Ç—Ä–∏–º–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤—ñ —Å—Ç–∞–≤–∫–∏
    const { data: categories, error: catError } = await supabase
      .from('safe_categories')
      .select('*')

    const { data: insuranceRates, error: insError } = await supabase
      .from('insurance_rates')
      .select('*')
      .order('min_days', { ascending: true })

    console.log('üìä Categories:', categories?.length || 0)
    console.log('üìä Insurance rates:', insuranceRates?.length || 0)

    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –≤ settings, —Å—Ç–≤–æ—Ä–∏–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
    let settings = null
    if (!allSettings || allSettings.length === 0) {
      console.log('üìù Creating default settings...')
      const { data: newSettings, error: createError } = await supabase
        .from('settings')
        .insert([{
          id: 1,
          trust_document_price: '100',
          package_price: '50',
          guarantee_amount: '10000'
        }])
        .select()
        .single()

      if (createError) {
        console.error('‚ùå Create settings error:', createError)
      } else {
        settings = newSettings
        console.log('‚úÖ Default settings created')
      }
    } else {
      settings = allSettings[0] // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å
    }

    return NextResponse.json({ 
      settings,
      categories,
      insuranceRates,
      debug: {
        settingsCount: allSettings?.length || 0,
        categoriesCount: categories?.length || 0,
        insuranceRatesCount: insuranceRates?.length || 0,
        note: 'TEMPORARY: Auth check disabled for debugging'
      }
    })

  } catch (error) {
    console.error('‚ùå Error:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Debug Save Settings API: Starting...')
    
    const body = await request.json()
    console.log('üìù Received settings:', body)

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if (body.settings) {
      const { data: settingsData, error: settingsError } = await supabase
        .from('settings')
        .upsert({ id: 1, ...body.settings }, { onConflict: 'id' })
        .select()
        .single()

      if (settingsError) {
        console.error('‚ùå Settings save error:', settingsError)
        return NextResponse.json({ 
          error: 'Failed to save settings', 
          details: settingsError.message 
        }, { status: 500 })
      }
      console.log('‚úÖ Settings saved')
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if (body.categories && Array.isArray(body.categories)) {
      for (const category of body.categories) {
        const { error: catError } = await supabase
          .from('safe_categories')
          .upsert({
            id: category.id,
            name: category.name,
            rate_up_to_30: category.rates.up_to_30,
            rate_31_to_90: category.rates.from_31_to_90,
            rate_91_to_180: category.rates.from_91_to_180,
            rate_181_to_365: category.rates.from_181_to_365,
          }, { onConflict: 'id' })

        if (catError) {
          console.error('‚ùå Category save error:', catError)
          return NextResponse.json({ 
            error: 'Failed to save category', 
            details: catError.message 
          }, { status: 500 })
        }
      }
      console.log('‚úÖ Categories saved')
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç—Ä–∞—Ö–æ–≤—ñ —Å—Ç–∞–≤–∫–∏
    if (body.insuranceRates && Array.isArray(body.insuranceRates)) {
      // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ
      await supabase.from('insurance_rates').delete().neq('id', 0)
      
      // –ü–æ—Ç—ñ–º –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ
      for (const rate of body.insuranceRates) {
        const { error: rateError } = await supabase
          .from('insurance_rates')
          .insert({
            min_days: rate.min_days,
            max_days: rate.max_days,
            price: rate.price
          })

        if (rateError) {
          console.error('‚ùå Insurance rate save error:', rateError)
          return NextResponse.json({ 
            error: 'Failed to save insurance rate', 
            details: rateError.message 
          }, { status: 500 })
        }
      }
      console.log('‚úÖ Insurance rates saved')
    }

    console.log('‚úÖ All data saved successfully')
    
    return NextResponse.json({ 
      success: true,
      debug: {
        note: 'TEMPORARY: Auth check disabled for debugging'
      }
    })

  } catch (error) {
    console.error('‚ùå Error:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
