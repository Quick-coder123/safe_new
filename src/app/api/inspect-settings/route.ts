import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function GET() {
  try {
    console.log('üîç Inspecting settings table structure...')

    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –ø–æ–ª—ñ–≤
    const attempts = [
      // –°–ø—Ä–æ–±–∞ 1: –í—Å—ñ –ø–æ–ª—è
      { fields: '*', label: 'All fields' },
      // –°–ø—Ä–æ–±–∞ 2: –¢—ñ–ª—å–∫–∏ ID
      { fields: 'id', label: 'ID only' },
      // –°–ø—Ä–æ–±–∞ 3: key-value —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      { fields: 'id,key,value', label: 'Key-value structure' },
      // –°–ø—Ä–æ–±–∞ 4: –ü—Ä—è–º—ñ –ø–æ–ª—è
      { fields: 'id,trust_document_price,package_price,guarantee_amount', label: 'Direct fields' }
    ]

    const results = []

    for (const attempt of attempts) {
      try {
        const { data, error } = await supabase
          .from('settings')
          .select(attempt.fields)

        results.push({
          attempt: attempt.label,
          fields: attempt.fields,
          success: !error,
          data: data,
          error: error?.message,
          count: data?.length || 0
        })
      } catch (err) {
        results.push({
          attempt: attempt.label,
          fields: attempt.fields,
          success: false,
          error: err instanceof Error ? err.message : 'Unknown error'
        })
      }
    }

    // –¢–∞–∫–æ–∂ —Å–ø—Ä–æ–±—É—î–º–æ –æ–ø–∏—Å–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω—ñ
    let tableInfo = null
    try {
      // –¶–µ –Ω–µ —Å–ø—Ä–∞—Ü—é—î –≤ Supabase, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ –¥–ª—è –ø–æ–≤–Ω–æ—Ç–∏
      const { data: metadata } = await supabase
        .from('settings')
        .select('*')
        .limit(0)
      
      tableInfo = metadata
    } catch (err) {
      console.log('Could not get table metadata')
    }

    return NextResponse.json({
      tableName: 'settings',
      attempts: results,
      tableInfo,
      summary: {
        successfulAttempts: results.filter(r => r.success).length,
        totalAttempts: results.length,
        recommendation: results.find(r => r.success && (r.count || 0) > 0)?.attempt || 'None successful with data'
      }
    })

  } catch (error) {
    console.error('‚ùå Inspection error:', error)
    return NextResponse.json({
      error: 'Failed to inspect table structure',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
