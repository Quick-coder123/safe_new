import { NextRequest, NextResponse } from 'next/server'
import { createSupabaseClient } from '@/lib/supabase'

export async function DELETE(request: NextRequest) {
  try {
    const supabase = createSupabaseClient()
    
    // Extract ID from URL path
    const url = new URL(request.url)
    const pathParts = url.pathname.split('/')
    const id = pathParts[pathParts.length - 1]

    if (!id || id === '[id]') {
      return NextResponse.json(
        { error: 'ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' },
        { status: 400 }
      )
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —î —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const { count } = await supabase
      .from('administrators')
      .select('*', { count: 'exact', head: true })

    if (count && count <= 1) {
      return NextResponse.json(
        { error: '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
        { status: 400 }
      )
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const { error } = await supabase
      .from('administrators')
      .delete()
      .eq('id', id)

    if (error) {
      console.error('Database error:', error)
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö' },
        { status: 500 }
      )
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('API Error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

export async function PUT(request: NextRequest) {
  console.log('üîÑ Update administrator role TEMP API: Starting request...')
  
  try {
    console.log('‚ö†Ô∏è TEMPORARY: Skipping authentication for role update')
    
    const supabase = createSupabaseClient()
    
    // Extract ID from URL path
    const url = new URL(request.url)
    const pathParts = url.pathname.split('/')
    const id = pathParts[pathParts.length - 1]

    if (!id || id === '[id]') {
      return NextResponse.json(
        { error: 'ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' },
        { status: 400 }
      )
    }

    const { role } = await request.json()
    console.log('üìù Updating administrator', id, 'to role:', role)

    if (!role || !['admin', 'super_admin'].includes(role)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä–æ–ª—å' },
        { status: 400 }
      )
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const { error } = await supabase
      .from('administrators')
      .update({ role })
      .eq('id', id)

    if (error) {
      console.error('‚ùå Database error:', error)
      return NextResponse.json(
        { error: '–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö' },
        { status: 500 }
      )
    }

    console.log('‚úÖ Administrator role updated successfully')
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('‚ùå API Error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
