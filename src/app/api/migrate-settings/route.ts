import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function POST() {
  try {
    console.log('üîß Migrating settings table structure...')

    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { data: currentSettings, error: fetchError } = await supabase
      .from('settings')
      .select('*')

    console.log('üìä Current settings:', currentSettings)

    if (fetchError) {
      console.error('‚ùå Error fetching current settings:', fetchError)
      return NextResponse.json({ 
        error: 'Failed to fetch current settings',
        details: fetchError.message 
      }, { status: 500 })
    }

    // –Ø–∫—â–æ —Ü–µ key-value —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–µ—Ä–µ—Ä–æ–±–ª—è—î–º–æ —ó—ó
    if (currentSettings && currentSettings.length > 0 && currentSettings[0].key) {
      console.log('üîÑ Converting from key-value to direct structure...')
      
      // –ó–±–∏—Ä–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ key-value
      const settingsObj: any = { id: 1 }
      currentSettings.forEach((setting: any) => {
        settingsObj[setting.key] = setting.value
      })

      // –î–æ–¥–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—ñ–≤, —è–∫–∏—Ö –º–æ–∂–µ –Ω–µ –±—É—Ç–∏
      if (!settingsObj.trust_document_price) settingsObj.trust_document_price = '300'
      if (!settingsObj.package_price) settingsObj.package_price = '50'
      if (!settingsObj.guarantee_amount) settingsObj.guarantee_amount = '5000'

      console.log('üìù New settings object:', settingsObj)

      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
      const { error: deleteError } = await supabase
        .from('settings')
        .delete()
        .neq('id', 0)

      if (deleteError) {
        console.error('‚ùå Error deleting old settings:', deleteError)
        return NextResponse.json({ 
          error: 'Failed to delete old settings',
          details: deleteError.message 
        }, { status: 500 })
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
      const { data: newSettings, error: insertError } = await supabase
        .from('settings')
        .insert([settingsObj])
        .select()

      if (insertError) {
        console.error('‚ùå Error inserting new settings:', insertError)
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤, —Å—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–æ—Å—Ç—ñ—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (insertError.message.includes('column') || insertError.message.includes('schema')) {
          console.log('üîß Creating minimal settings structure...')
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å —Ç—ñ–ª—å–∫–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ø–æ–ª—è–º–∏
          const { data: minimalSettings, error: minimalError } = await supabase
            .from('settings')
            .insert([{ id: 1 }])
            .select()

          if (minimalError) {
            console.error('‚ùå Error creating minimal settings:', minimalError)
            return NextResponse.json({ 
              error: 'Failed to create settings',
              details: minimalError.message 
            }, { status: 500 })
          }

          return NextResponse.json({
            success: true,
            message: 'Minimal settings structure created',
            data: minimalSettings,
            note: 'Some columns may need to be added to the database schema'
          })
        }
        
        return NextResponse.json({ 
          error: 'Failed to insert new settings',
          details: insertError.message 
        }, { status: 500 })
      }

      console.log('‚úÖ Settings structure migrated successfully')
      return NextResponse.json({
        success: true,
        message: 'Settings structure migrated from key-value to direct',
        data: newSettings
      })

    } else if (!currentSettings || currentSettings.length === 0) {
      console.log('üìù Creating default settings...')
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      const defaultSettings = {
        id: 1,
        trust_document_price: '300',
        package_price: '50',
        guarantee_amount: '5000'
      }

      const { data: newSettings, error: createError } = await supabase
        .from('settings')
        .insert([defaultSettings])
        .select()

      if (createError) {
        console.error('‚ùå Error creating default settings:', createError)
        
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤, —Å–ø—Ä–æ–±—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (createError.message.includes('column') || createError.message.includes('schema')) {
          const { data: minimalSettings, error: minimalError } = await supabase
            .from('settings')
            .insert([{ id: 1 }])
            .select()

          if (minimalError) {
            return NextResponse.json({ 
              error: 'Failed to create any settings',
              details: minimalError.message 
            }, { status: 500 })
          }

          return NextResponse.json({
            success: true,
            message: 'Minimal settings created - database schema needs updating',
            data: minimalSettings,
            missingColumns: ['trust_document_price', 'package_price', 'guarantee_amount']
          })
        }

        return NextResponse.json({ 
          error: 'Failed to create default settings',
          details: createError.message 
        }, { status: 500 })
      }

      return NextResponse.json({
        success: true,
        message: 'Default settings created',
        data: newSettings
      })

    } else {
      console.log('‚úÖ Settings already in correct format')
      return NextResponse.json({
        success: true,
        message: 'Settings already in correct format',
        data: currentSettings
      })
    }

  } catch (error) {
    console.error('‚ùå Migration error:', error)
    return NextResponse.json({
      error: 'Migration failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
