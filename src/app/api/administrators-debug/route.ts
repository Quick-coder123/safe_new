import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Simple Administrators API: Starting...')
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ environment variables
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    
    console.log('üîß Environment check:', { 
      urlConfigured: !!supabaseUrl && supabaseUrl !== 'https://placeholder.supabase.co',
      keyConfigured: !!supabaseKey && supabaseKey !== 'placeholder-key',
      url: supabaseUrl
    })
    
    if (!supabaseUrl || !supabaseKey || supabaseUrl === 'https://placeholder.supabase.co') {
      return NextResponse.json({ 
        error: 'Environment variables not configured',
        details: {
          url: supabaseUrl,
          keyPresent: !!supabaseKey
        }
      }, { status: 500 })
    }

    console.log('üìä Fetching administrators without auth check...')
    
    // –¢–ò–ú–ß–ê–°–û–í–û: –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    const { data: administrators, error } = await supabase
      .from('administrators')
      .select('*')
      .order('created_at', { ascending: false })

    if (error) {
      console.error('‚ùå Database error:', error)
      return NextResponse.json({ 
        error: 'Database query failed', 
        details: error.message,
        code: error.code 
      }, { status: 500 })
    }

    console.log('‚úÖ Successfully fetched administrators:', administrators?.length || 0)
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ cookies –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const cookieHeader = request.headers.get('cookie')
    
    return NextResponse.json({ 
      administrators,
      debug: {
        count: administrators?.length || 0,
        cookiePresent: !!cookieHeader,
        cookieLength: cookieHeader?.length || 0,
        note: 'TEMPORARY: Auth check disabled for debugging'
      }
    })

  } catch (error) {
    console.error('‚ùå Error:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
