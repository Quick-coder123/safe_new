import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import bcrypt from 'bcryptjs'

export async function PUT(request: NextRequest) {
  console.log('üîÑ Reset-password TEMP API: Starting request...')
  
  try {
    console.log('‚ö†Ô∏è TEMPORARY: Skipping authentication for reset-password')
    
    const { administratorId } = await request.json()
    console.log('üìù Administrator ID to reset:', administratorId)

    if (!administratorId) {
      return NextResponse.json({ error: 'Administrator ID is required' }, { status: 400 })
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    const { data: admin, error: fetchError } = await supabase
      .from('administrators')
      .select('id, login')
      .eq('id', administratorId)
      .single()

    if (fetchError || !admin) {
      console.error('‚ùå Administrator not found:', fetchError)
      return NextResponse.json({ error: 'Administrator not found' }, { status: 404 })
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    const tempPassword = Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-4).toUpperCase() + '!'
    console.log('üîë Generated new temporary password for:', admin.login)
    
    // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(tempPassword, 10)

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const { error: updateError } = await supabase
      .from('administrators')
      .update({ 
        password_hash: hashedPassword,
        is_temp_password: true
      })
      .eq('id', administratorId)

    if (updateError) {
      console.error('‚ùå Error updating password:', updateError)
      throw updateError
    }

    console.log('‚úÖ Password reset successfully for administrator:', admin.login)

    return NextResponse.json({ 
      success: true,
      message: `–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "${admin.login}" —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ! –ù–æ–≤–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å: ${tempPassword}`,
      temporaryPassword: tempPassword
    })

  } catch (error) {
    console.error('‚ùå Reset password error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
