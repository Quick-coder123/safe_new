
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { supabase } from '@/lib/supabase'
import { useAuth } from '@/contexts/AuthContext'
import PasswordChangeModal from '@/components/PasswordChangeModal'
import LoginForm from '@/components/LoginForm'
import { useConfirmDialog } from '@/components/ConfirmDialog'
import { useNotification } from '@/components/Notification'
import CredentialsModal from '@/components/CredentialsModal'
import ResetPasswordModal from '@/components/ResetPasswordModal'
import Link from 'next/link'
import AdminSafes from './safes/page'

interface SafeCategory {
  id: string
  name: string
  rates: {
    up_to_30: number
    from_31_to_90: number
    from_91_to_180: number
    from_181_to_365: number
  }
}

interface InsuranceRate {
  min_days: number
  max_days: number
  price: number
}

interface Settings {
  trust_document_price: string
  package_price: string
  guarantee_amount: string
}


interface Administrator {
  id: number
  login: string
  role: 'admin' | 'super_admin'
  is_temp_password: boolean
  created_at: string
  created_by: string
}

export default function AdminPage() {
  const router = useRouter()
  const { isAdmin, isSuperAdmin, hasTempPassword, admin, loading: authLoading, logout } = useAuth()
  const [activeTab, setActiveTab] = useState('categories')

  const [categories, setCategories] = useState<SafeCategory[]>([])
  const [insuranceRates, setInsuranceRates] = useState<InsuranceRate[]>([])
  const [settings, setSettings] = useState<Settings>({
    trust_document_price: '',
    package_price: '',
    guarantee_amount: '',
  })
  // ...–≤–∏–¥–∞–ª–µ–Ω–æ –∂—É—Ä–Ω–∞–ª –∑–º—ñ–Ω...
  const [administrators, setAdministrators] = useState<Administrator[]>([])
  
  // –°—Ç–∞–Ω –¥–ª—è —Ñ–æ—Ä–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const [newAdminLogin, setNewAdminLogin] = useState('')
  const [newAdminRole, setNewAdminRole] = useState<'admin' | 'super_admin'>('admin')
  
  // –°—Ç–∞–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  
  // –°—Ç–∞–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ credentials
  const [showCredentialsModal, setShowCredentialsModal] = useState(false)
  const [newCredentials, setNewCredentials] = useState({ login: '', password: '' })

  // –°—Ç–∞–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
  const [showResetPasswordModal, setShowResetPasswordModal] = useState(false)
  const [resetPasswordData, setResetPasswordData] = useState({ login: '', password: '' })

  // –•—É–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤
  const { showConfirm, ConfirmDialogComponent } = useConfirmDialog()
  const { showNotification, NotificationComponent } = useNotification()

  useEffect(() => {
    if (admin) {
      loadData()
      if (isSuperAdmin) {
        loadAdministrators()
      }
    }
  }, [admin, isSuperAdmin])

  // –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ä–º—É –ª–æ–≥—ñ–Ω—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
    )
  }

  if (!isAdmin) {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, –¥–µ –±—É–¥–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    router.push('/')
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center animate-bounce">
            <span className="text-2xl">üîê</span>
          </div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...</h2>
          <p className="text-gray-600">–í–∏ –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –≤—Ö–æ–¥—É</p>
        </div>
      </div>
    )
  }

  const handleLogout = async () => {
    await logout()
    router.push('/')
  }

  const loadData = async () => {
    try {
      const response = await fetch('/api/get-settings-temp')
      const data = await response.json()
      
      console.log('ÔøΩ Loaded data from get-settings:', data)
      
      if (data.categories) {
        const formattedCategories = data.categories.map((cat: any) => ({
          id: cat.id,
          name: cat.name,
          rates: {
            up_to_30: cat.rate_up_to_30,
            from_31_to_90: cat.rate_31_to_90,
            from_91_to_180: cat.rate_91_to_180,
            from_181_to_365: cat.rate_181_to_365,
          }
        }))
        setCategories(formattedCategories)
      }
      
      if (data.insuranceRates) {
        setInsuranceRates(data.insuranceRates)
      }
      
      if (data.settings) {
        setSettings(prev => ({ ...prev, ...data.settings }))
      }

  // ...–≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂—É—Ä–Ω–∞–ª—É –∑–º—ñ–Ω...
    } catch (error) {
      console.error('Error loading data:', error)
    }
  }

  const saveData = async () => {
    try {
      const response = await fetch('/api/save-settings-temp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          categories,
          insuranceRates,
          settings,
        }),
      })

      const data = await response.json()
      
      console.log('ÔøΩ Save response:', data)

      if (response.ok) {
        showNotification({
          title: '–£—Å–ø—ñ—Ö!',
          message: '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!',
          type: 'success'
        })
        loadData() // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
      } else {
        showNotification({
          title: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
          message: data.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
          type: 'error'
        })
        console.error('Save error details:', data)
      }
    } catch (error) {
      console.error('Error saving data:', error)
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ',
        type: 'error'
      })
    }
  }

  const updateCategory = (categoryId: string, field: string, value: number) => {
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId 
        ? { ...cat, rates: { ...cat.rates, [field]: value } }
        : cat
    ))
  }

  const updateInsuranceRate = (index: number, field: string, value: number) => {
    setInsuranceRates(prev => prev.map((rate, i) => 
      i === index ? { ...rate, [field]: value } : rate
    ))
  }

  const loadAdministrators = async () => {
    try {
      // –¢–ò–ú–ß–ê–°–û–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ temp endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      const response = await fetch('/api/administrators-temp')

      if (response.ok) {
        const { administrators } = await response.json()
        console.log('üë• Loaded administrators:', administrators)
        setAdministrators(administrators)
      }
    } catch (error) {
      console.error('Error loading administrators:', error)
    }
  }

  const createAdministrator = async () => {
    if (!newAdminLogin.trim()) {
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞',
        message: '–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        type: 'warning'
      })
      return
    }

    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
      const tempPassword = Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8)

      const response = await fetch('/api/administrators-temp/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          login: newAdminLogin,
          password: tempPassword,
        }),
      })

      if (response.ok) {
        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ credentials
        setNewCredentials({ login: newAdminLogin, password: tempPassword })
        setShowCredentialsModal(true)
        setNewAdminLogin('')
        setNewAdminRole('admin')
        loadAdministrators()
      } else {
        const { error } = await response.json()
        showNotification({
          title: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è',
          message: error || '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
          type: 'error'
        })
      }
    } catch (error) {
      console.error('Error creating administrator:', error)
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        type: 'error'
      })
    }
  }

  const deleteAdministrator = async (administratorId: number) => {
    const confirmed = await showConfirm({
      title: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è',
      message: '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞? –¶—è –¥—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.',
      type: 'error',
      confirmText: '–í–∏–¥–∞–ª–∏—Ç–∏',
      cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
    })

    if (!confirmed) return

    try {
      const response = await fetch(`/api/administrators-temp/${administratorId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        showNotification({
          title: '–£—Å–ø—ñ—Ö!',
          message: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!',
          type: 'success'
        })
        loadAdministrators()
      } else {
        const { error } = await response.json()
        showNotification({
          title: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è',
          message: error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
          type: 'error'
        })
      }
    } catch (error) {
      console.error('Error deleting administrator:', error)
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        type: 'error'
      })
    }
  }

  const updateAdministratorRole = async (administratorId: number, role: string) => {
    try {
      const response = await fetch(`/api/administrators-temp/${administratorId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ role }),
      })

      if (response.ok) {
        showNotification({
          title: '–£—Å–ø—ñ—Ö!',
          message: '–†–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!',
          type: 'success'
        })
        loadAdministrators()
      } else {
        const { error } = await response.json()
        showNotification({
          title: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è',
          message: error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ä–æ–ª—å',
          type: 'error'
        })
      }
    } catch (error) {
      console.error('Error updating administrator role:', error)
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ä–æ–ª—å',
        type: 'error'
      })
    }
  }

  const resetAdministratorPassword = async (administratorId: number) => {
    const confirmed = await showConfirm({
      title: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è',
      message: '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å —Ü—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞?',
      type: 'warning',
      confirmText: '–°–∫–∏–Ω—É—Ç–∏',
      cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
    })

    if (!confirmed) return

    try {
      const response = await fetch('/api/reset-password-temp', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ administratorId }),
      })

      if (response.ok) {
        const result = await response.json()
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞ ID –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω–∞
        const admin = administrators.find(a => a.id === administratorId)
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –Ω–æ–≤–∏–º –ø–∞—Ä–æ–ª–µ–º
        setResetPasswordData({ 
          login: admin?.login || '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä', 
          password: result.temporaryPassword || '' 
        })
        setShowResetPasswordModal(true)
        
        loadAdministrators()
      } else {
        const { error } = await response.json()
        showNotification({
          title: '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è',
          message: error || '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å',
          type: 'error'
        })
      }
    } catch (error) {
      console.error('Error resetting password:', error)
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å',
        type: 'error'
      })
    }
  }

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è credentials
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      return true
    } catch (err) {
      console.error('Failed to copy: ', err)
      return false
    }
  }

  const copyLogin = async () => {
    const success = await copyToClipboard(newCredentials.login)
    if (success) {
      showNotification({
        title: '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!',
        message: '–õ–æ–≥—ñ–Ω —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ –±—É—Ñ–µ—Ä—É –æ–±–º—ñ–Ω—É!',
        type: 'success'
      })
    } else {
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ª–æ–≥—ñ–Ω',
        type: 'error'
      })
    }
  }

  const copyPassword = async () => {
    const success = await copyToClipboard(newCredentials.password)
    if (success) {
      showNotification({
        title: '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!',
        message: '–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ –±—É—Ñ–µ—Ä—É –æ–±–º—ñ–Ω—É!',
        type: 'success'
      })
    } else {
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å',
        type: 'error'
      })
    }
  }

  const copyBoth = async () => {
    const both = `–õ–æ–≥—ñ–Ω: ${newCredentials.login}\n–ü–∞—Ä–æ–ª—å: ${newCredentials.password}`
    const success = await copyToClipboard(both)
    if (success) {
      showNotification({
        title: '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!',
        message: '–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ –±—É—Ñ–µ—Ä—É –æ–±–º—ñ–Ω—É!',
        type: 'success'
      })
    } else {
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ',
        type: 'error'
      })
    }
  }

  const handleCopyPassword = async () => {
    const success = await copyToClipboard(resetPasswordData.password)
    if (success) {
      showNotification({
        title: '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!',
        message: '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ –±—É—Ñ–µ—Ä—É –æ–±–º—ñ–Ω—É!',
        type: 'success'
      })
    } else {
      showNotification({
        title: '–ü–æ–º–∏–ª–∫–∞',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å',
        type: 'error'
      })
    }
  }

  const updateSetting = (key: string, value: string) => {
    setSettings(prev => ({ ...prev, [key]: value }))
  }

  return (
    <div className="space-y-6 animate-fadeIn">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center animate-slideInUp">
        <h1 className="text-3xl font-bold text-gray-900 animate-pulse">üõ†Ô∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <div className="flex items-center space-x-4">
          {/* –ö–Ω–æ–ø–∫–∞ "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–µ–π—Ñ–∏" —Ç–µ–ø–µ—Ä —É –≤–∫–ª–∞–¥–∫–∞—Ö */}
          {hasTempPassword && (
            <span className="ml-2 px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded animate-bounce">
              –¢–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
            </span>
          )}
        </div>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="border-b border-gray-200 animate-slideInUp">
        <nav className="-mb-px flex space-x-8">
          <div className="flex-1 flex space-x-8">
            {[
              { id: 'categories', name: '–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–µ–π—Ñ—ñ–≤', icon: 'üìÅ' },
              { id: 'insurance', name: '–°—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è', icon: 'üõ°Ô∏è' },
              { id: 'settings', name: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', icon: '‚öôÔ∏è' },
              ...(isSuperAdmin ? [{ id: 'administrators', name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏', icon: 'üë•' }] : []),
              // ...–≤–∏–¥–∞–ª–µ–Ω–æ –≤–∫–ª–∞–¥–∫—É –∂—É—Ä–Ω–∞–ª—É –∑–º—ñ–Ω...
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-2 px-3 border-b-2 font-normal text-xs transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 whitespace-nowrap ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600 bg-blue-50 shadow-md'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:bg-gray-50'
                }`}
              >
                <span className="mr-2">{tab.icon}</span>
                {tab.name}
              </button>
            ))}
            <a
              href="/admin/safes"
              className={`py-2 px-3 border-b-2 font-normal text-xs transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 flex items-center whitespace-nowrap ${
                (typeof window !== 'undefined' && window.location.pathname === '/admin/safes')
                  ? 'border-blue-500 text-blue-600 bg-blue-50 shadow-md'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:bg-gray-50'
              }`}
              style={{ textDecoration: 'none' }}
            >
              <span className="mr-2">üèß</span>–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–µ–π—Ñ–∏
            </a>
          </div>
          <div className="flex items-center ml-auto">
              <button
                onClick={() => setShowPasswordModal(true)}
                className="py-2 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-blue-600 hover:border-blue-300 transition-colors duration-200 flex items-center"
                style={{ textDecoration: 'none' }}
              >
                  <span className="mr-2"><i className="fa fa-lock"></i></span>üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å
              </button>
          </div>
  <PasswordChangeModal isOpen={showPasswordModal} onClose={() => setShowPasswordModal(false)} />
        </nav>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="calculator-card animate-slideInUp">
        {activeTab === 'categories' && (
          <div className="animate-fadeIn">
            <h2 className="text-xl font-semibold mb-4 flex items-center animate-slideInLeft">
              <span className="mr-2">üìÅ</span>
              –¢–∞—Ä–∏—Ñ–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
            </h2>
            <div className="overflow-x-auto bg-white rounded-lg shadow-lg">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="bg-gradient-to-r from-gray-100 to-gray-200 animate-slideInDown">
                    <th className="border border-gray-300 px-4 py-3 text-left font-bold text-gray-900 w-48 min-w-[12rem]">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</th>
                    <th className="border border-gray-300 px-4 py-3 text-center font-bold text-gray-900">–¥–æ 30 –¥–Ω—ñ–≤</th>
                    <th className="border border-gray-300 px-4 py-3 text-center font-bold text-gray-900">31-90 –¥–Ω—ñ–≤</th>

                    <th className="border border-gray-300 px-4 py-3 text-center font-bold text-gray-900">91-180 –¥–Ω—ñ–≤</th>
                    <th className="border border-gray-300 px-4 py-3 text-center font-bold text-gray-900">181-365 –¥–Ω—ñ–≤</th>
                  </tr>
                </thead>
                <tbody className="bg-white">
                  {categories.map((category, index) => (
                    <tr 
                      key={category.id} 
                      className="hover:bg-blue-50 transition-all duration-300 animate-slideInUp"
                      style={{animationDelay: `${index * 0.1}s`}}
                    >
                      <td className="border border-gray-300 px-4 py-3 font-semibold text-gray-900 w-48 min-w-[12rem]">
                        {category.name}
                      </td>
                      <td className="border border-gray-300 px-3 py-2">
                        <input
                          type="number"
                          step="0.01"
                          className="w-full px-3 py-2 border border-gray-300 rounded transition-all duration-300 focus:outline-none focus:border-blue-500 focus:shadow-lg focus:scale-105 text-gray-900 bg-white hover:border-blue-300"
                          value={category.rates.up_to_30}
                          onChange={(e) => updateCategory(category.id, 'up_to_30', parseFloat(e.target.value))}
                        />
                      </td>
                      <td className="border border-gray-300 px-3 py-2">
                        <input
                          type="number"
                          step="0.01"
                          className="w-full px-3 py-2 border border-gray-300 rounded transition-all duration-300 focus:outline-none focus:border-blue-500 focus:shadow-lg focus:scale-105 text-gray-900 bg-white hover:border-blue-300"
                          value={category.rates.from_31_to_90}
                          onChange={(e) => updateCategory(category.id, 'from_31_to_90', parseFloat(e.target.value))}
                        />
                      </td>
                      <td className="border border-gray-300 px-3 py-2">
                        <input
                          type="number"
                          step="0.01"
                          className="w-full px-3 py-2 border border-gray-300 rounded transition-all duration-300 focus:outline-none focus:border-blue-500 focus:shadow-lg focus:scale-105 text-gray-900 bg-white hover:border-blue-300"
                          value={category.rates.from_91_to_180}
                          onChange={(e) => updateCategory(category.id, 'from_91_to_180', parseFloat(e.target.value))}
                        />
                      </td>
                      <td className="border border-gray-300 px-3 py-2">
                        <input
                          type="number"
                          step="0.01"
                          className="w-full px-3 py-2 border border-gray-300 rounded transition-all duration-300 focus:outline-none focus:border-blue-500 focus:shadow-lg focus:scale-105 text-gray-900 bg-white hover:border-blue-300"
                          value={category.rates.from_181_to_365}
                          onChange={(e) => updateCategory(category.id, 'from_181_to_365', parseFloat(e.target.value))}
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeTab === 'insurance' && (
          <div className="animate-fadeIn">
            <h2 className="text-xl font-semibold mb-4 flex items-center animate-slideInLeft">
              <span className="mr-2">üõ°Ô∏è</span>
              –¢–∞—Ä–∏—Ñ–∏ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞
            </h2>
            <div className="space-y-4">
              {insuranceRates.map((rate, index) => (
                <div 
                  key={index} 
                  className="grid grid-cols-3 gap-4 p-4 border rounded-lg shadow-md hover:shadow-lg transition-all duration-300 animate-slideInUp bg-white"
                  style={{animationDelay: `${index * 0.1}s`}}
                >
                  <div>
                    <label className="form-label">–ú—ñ–Ω. –¥–Ω—ñ–≤</label>
                    <input
                      type="number"
                      className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                      value={rate.min_days}
                      onChange={(e) => updateInsuranceRate(index, 'min_days', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <label className="form-label">–ú–∞–∫—Å. –¥–Ω—ñ–≤</label>
                    <input
                      type="number"
                      className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                      value={rate.max_days}
                      onChange={(e) => updateInsuranceRate(index, 'max_days', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <label className="form-label">–¶—ñ–Ω–∞ (–≥—Ä–Ω)</label>
                    <input
                      type="number"
                      className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                      step="0.01"
                      value={rate.price}
                      onChange={(e) => updateInsuranceRate(index, 'price', parseFloat(e.target.value))}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="animate-fadeIn">
            <h2 className="text-xl font-semibold mb-4 flex items-center animate-slideInLeft">
              <span className="mr-2">‚öôÔ∏è</span>
              –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="space-y-4 animate-slideInUp" style={{animationDelay: '0.1s'}}>
                <div className="form-group p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300">
                  <label className="form-label flex items-center">
                    <span className="mr-2">üìÑ</span>
                    –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ–≤—ñ—Ä–µ–Ω–æ—Å—Ç—ñ (–≥—Ä–Ω)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                    value={settings.trust_document_price}
                    onChange={(e) => updateSetting('trust_document_price', e.target.value)}
                  />
                </div>
              </div>
              <div className="space-y-4 animate-slideInUp" style={{animationDelay: '0.2s'}}>
                <div className="form-group p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300">
                  <label className="form-label flex items-center">
                    <span className="mr-2">üì¶</span>
                    –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—É (–≥—Ä–Ω)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                    value={settings.package_price}
                    onChange={(e) => updateSetting('package_price', e.target.value)}
                  />
                </div>
              </div>
              <div className="space-y-4 animate-slideInUp" style={{animationDelay: '0.3s'}}>
                <div className="form-group p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300">
                  <label className="form-label flex items-center">
                    <span className="mr-2">üí∞</span>
                    –ì—Ä–æ—à–æ–≤–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (–≥—Ä–Ω)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                    value={settings.guarantee_amount}
                    onChange={(e) => updateSetting('guarantee_amount', e.target.value)}
                  />
                  <p className="text-sm text-gray-600 mt-1">
                    –°—É–º–∞ –≥—Ä–æ—à–æ–≤–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—é –∫–ª—é—á–∞
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'administrators' && isSuperAdmin && (
          <div className="animate-fadeIn">
            <h2 className="text-xl font-semibold mb-4 flex items-center animate-slideInLeft">
              <span className="mr-2">üë•</span>
              –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
            </h2>
            
            {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
            <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4 mb-6 shadow-md animate-slideInUp">
              <h3 className="text-lg font-medium mb-3 flex items-center">
                <span className="mr-2">‚ûï</span>
                –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="animate-slideInUp" style={{animationDelay: '0.1s'}}>
                  <label className="form-label">–õ–æ–≥—ñ–Ω</label>
                  <input
                    type="text"
                    className="form-input transition-all duration-300 hover:scale-105 focus:scale-105"
                    value={newAdminLogin}
                    onChange={(e) => setNewAdminLogin(e.target.value)}
                    placeholder="admin_user"
                    pattern="[a-zA-Z0-9_-]+"
                    title="–õ–æ–≥—ñ–Ω –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è —Ç–∞ –¥–µ—Ñ—ñ—Å–∏"
                  />
                </div>
                <div className="animate-slideInUp" style={{animationDelay: '0.2s'}}>
                  <label className="form-label">–†–æ–ª—å</label>
                  <select
                    className="form-select animate-slideInUp transition-all duration-300 hover:scale-105 focus:scale-105"
                    value={newAdminRole}
                    onChange={(e) => setNewAdminRole(e.target.value as 'admin' | 'super_admin')}
                  >
                    <option value="admin">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                    <option value="super_admin">–°—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                  </select>
                </div>
                <div className="flex items-end animate-slideInUp" style={{animationDelay: '0.3s'}}>
                  <button
                    onClick={createAdministrator}
                    className="btn-primary w-full transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
                  >
                    –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                  </button>
                </div>
              </div>
              <div className="mt-3 text-sm text-gray-600">
                <p><strong>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:</strong> –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ–∏ —Ç–∞ –±–∞—á–∏—Ç–∏ –±–ª–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤</p>
                <p><strong>–°—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:</strong> –º–∞—î –≤—Å—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ + –º–æ–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç–∏ —ñ–Ω—à–∏–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</p>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ */}
            <div className="overflow-x-auto bg-white rounded-lg shadow-lg animate-slideInUp">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="bg-gradient-to-r from-gray-100 to-gray-200 animate-slideInDown">
                    <th className="border border-gray-300 px-4 py-3 text-left font-bold text-gray-900">–õ–æ–≥—ñ–Ω</th>
                    <th className="border border-gray-300 px-4 py-3 text-left font-bold text-gray-900">–†–æ–ª—å</th>
                    <th className="border border-gray-300 px-4 py-3 text-left font-bold text-gray-900">–°—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—è</th>
                    <th className="border border-gray-300 px-4 py-3 text-left font-bold text-gray-900">–°—Ç–≤–æ—Ä–µ–Ω–æ</th>
                    <th className="border border-gray-300 px-4 py-3 text-left font-bold text-gray-900">–î—ñ—ó</th>
                  </tr>
                </thead>
                <tbody className="bg-white">
                  {administrators.map((adminItem, index) => (
                    <tr 
                      key={adminItem.id} 
                      className="hover:bg-blue-50 transition-all duration-300 animate-slideInUp"
                      style={{animationDelay: `${index * 0.1}s`}}
                    >
                      <td className="border border-gray-300 px-4 py-3 text-gray-900">
                        {adminItem.login}
                        {adminItem.id === admin?.adminId && (
                          <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">–í–∏</span>
                        )}
                      </td>
                      <td className="border border-gray-300 px-4 py-3">
                        <select
                          className="form-select text-sm"
                          value={adminItem.role}
                          onChange={(e) => updateAdministratorRole(adminItem.id, e.target.value)}
                          disabled={adminItem.id === admin?.adminId}
                        >
                          <option value="admin">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                          <option value="super_admin">–°—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                        </select>
                      </td>
                      <td className="border border-gray-300 px-4 py-3">
                        {adminItem.is_temp_password ? (
                          <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded">
                            –¢–∏–º—á–∞—Å–æ–≤–∏–π
                          </span>
                        ) : (
                          <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">
                            –í–ª–∞—Å–Ω–∏–π
                          </span>
                        )}
                      </td>
                      <td className="border border-gray-300 px-4 py-3 text-sm text-gray-900">
                        {new Date(adminItem.created_at).toLocaleDateString('uk-UA')}
                      </td>
                      <td className="border border-gray-300 px-4 py-3">
                        <div className="flex gap-2">
                          {adminItem.id !== admin?.adminId && (
                            <>
                              <button
                                onClick={() => resetAdministratorPassword(adminItem.id)}
                                className="btn-secondary text-xs transition-all duration-300 transform hover:scale-105 hover:shadow-md"
                                title="–°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å"
                              >
                                üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å
                              </button>
                              <button
                                onClick={() => deleteAdministrator(adminItem.id)}
                                className="btn-danger text-xs transition-all duration-300 transform hover:scale-105 hover:shadow-md"
                              >
                                üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                              </button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

  {/* ...–≤–∏–¥–∞–ª–µ–Ω–æ –∂—É—Ä–Ω–∞–ª –∑–º—ñ–Ω... */}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è */}
        {activeTab !== 'logs' && activeTab !== 'administrators' && (
          <div className="mt-6">
            <button onClick={saveData} className="btn-primary">
              –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            </button>
          </div>
        )}
      </div>



      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –Ω–æ–≤–∏–º–∏ credentials */}

      <CredentialsModal
        isOpen={showCredentialsModal}
        credentials={newCredentials}
        onClose={() => setShowCredentialsModal(false)}
        onCopy={(type) => {
          if (type === 'login') copyLogin()
          else if (type === 'password') copyPassword()
          else if (type === 'both') copyBoth()
        }}
      />

      <ResetPasswordModal
        isOpen={showResetPasswordModal}
        adminLogin={resetPasswordData.login}
        newPassword={resetPasswordData.password}
        onClose={() => setShowResetPasswordModal(false)}
        onCopy={handleCopyPassword}
      />

      <ConfirmDialogComponent />
      <NotificationComponent />
    </div>
  )
}

